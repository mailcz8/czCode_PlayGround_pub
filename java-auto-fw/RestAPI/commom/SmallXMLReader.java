package commom;import java.io.IOException;import java.io.StringReader;import java.io.StringWriter;import javax.xml.parsers.DocumentBuilder;import javax.xml.parsers.DocumentBuilderFactory;import javax.xml.parsers.ParserConfigurationException;import javax.xml.transform.OutputKeys;import javax.xml.transform.Transformer;import javax.xml.transform.TransformerException;import javax.xml.transform.TransformerFactory;import javax.xml.transform.dom.DOMSource;import javax.xml.transform.stream.StreamResult;import javax.xml.xpath.XPath;import javax.xml.xpath.XPathConstants;import javax.xml.xpath.XPathExpression;import javax.xml.xpath.XPathFactory;import org.w3c.dom.Document;import org.w3c.dom.Element;import org.w3c.dom.NamedNodeMap;import org.w3c.dom.Node;import org.w3c.dom.NodeList;import org.xml.sax.InputSource;import org.xml.sax.SAXException;import baseHelper.ExecutionLog;public class SmallXMLReader {	DocumentBuilderFactory factory;	DocumentBuilder builder;	InputSource is;	Document doc;	Element rootElement;		public SmallXMLReader(String xmlResponse) throws Exception{		try {			factory = DocumentBuilderFactory.newInstance();			builder = factory.newDocumentBuilder();			is = new InputSource(new StringReader(xmlResponse));			doc = builder.parse(is);						rootElement = doc.getDocumentElement();		} catch (ParserConfigurationException e) {			e.printStackTrace();		} 	}		public String getSuccessValue() throws Exception {		String successValue = null;				doc.getDocumentElement().normalize();		successValue = rootElement.getAttribute("success");				if (successValue == null){			ExecutionLog.Log("No 'success' attribute found.");		}		return successValue;	}		public String getMessage() throws Exception {		String message = null;				NodeList list = rootElement.getElementsByTagName("message");				if (list.getLength() > 0){			 message = list.item(0).getChildNodes().item(0).getNodeValue();		} else {			ExecutionLog.Log("No 'message' element found.");		}		return message;	}			public String ap_GetDimensionAttributeByDimensionID(String dimAttributeName, int dimensionID) throws Exception {		String dimAttrValue = null;		String xpathExpression = "//dimension[@id=" + dimensionID + "]"; 		NodeList nodeList = getNodesByXPath(xpathExpression);				if (nodeList != null) {			Node testNode = getNode(nodeList, "dimensionValue");			if (testNode != null){				dimAttrValue = getNodeAttributeValue(testNode, dimAttributeName);			} 		}else {				ExecutionLog.Log(this.getClass().getName()+ ".getDimAttributeByDimID(): No nodes found matching dimension id \"" + dimensionID + "\"");		}		return dimAttrValue;	}		public String ap_GetDimValAttributeByDimValID(String dimValAttributeName, String dimValID) throws Exception {		String dimValAttrValue = null;				String xpathExpression = "//dimensionValue[@id=" + dimValID + "]"; 		NodeList nodeList = getNodesByXPath(xpathExpression);				if (nodeList != null) {			Node testNode = getNode(nodeList, "dimensionValue");			if (testNode != null){				dimValAttrValue = getNodeAttributeValue(testNode, dimValAttributeName);			}		} else {			ExecutionLog.Log(this.getClass().getName() + ".ap_GetDimValAttributeByDimValD(): No nodes found matching dimension value id \"" + dimValID + "\"");		}		return dimValAttrValue;	}	public NodeList getNodesByXPath(String expression) throws Exception {		NodeList nodeList = null;				XPath xPath =  XPathFactory.newInstance().newXPath();		XPathExpression xpathExpression = xPath.compile(expression);		Boolean matchFound = (Boolean) xpathExpression.evaluate(doc, XPathConstants.BOOLEAN);				if (matchFound) {			nodeList = (NodeList) xpathExpression.evaluate(doc, XPathConstants.NODESET);		} else {			ExecutionLog.Log(this.getClass().getName()+ ".getNodesByXPath(): XPATH expresion \"" + expression + "\" not foud in doc");		}		return nodeList;	}		public Node getNode(NodeList nodeList, String nodeTag) throws Exception {		Node testNode = null;				if(nodeList == null) {			ExecutionLog.Log("NodeList = null");		} else if (nodeList != null){			if (nodeList.getLength() == 1){				testNode = nodeList.item(0);			} else if (nodeList.getLength() == 0) {				ExecutionLog.Log(this.getClass().getName()+ ".getNode():  No nodes found matching \"" + nodeTag + "\" in nodelist");			} else if (nodeList.getLength() > 1) {				ExecutionLog.Log("Found " + nodeList.getLength() + " nodes matching \"" + nodeTag + "\" in nodelist");			}		}		return testNode;	}		public String getNodeAttributeValue(Node testNode, String attributeName) throws Exception {		String nodeAttributeValue = null;				NamedNodeMap attributes = testNode.getAttributes();				if (attributes != null) {			if(attributes.getLength() > 0) {				Node nodeAttribute = attributes.getNamedItem(attributeName);				if (nodeAttribute != null) {					nodeAttributeValue = nodeAttribute.getNodeValue().toString();				} else {					ExecutionLog.Log(this.getClass().getName() + ".getNodeAttributeValue():  No attribute found matching \"" + 							attributeName + "\" in node \"" + testNode.getNodeName() + "\"");				}			} 		}		return nodeAttributeValue;	}		public String getNodeStringByXPath(String xpathExpression) throws Exception{		String xml = null;				XPath xPath =  XPathFactory.newInstance().newXPath();		NodeList nodeList = (NodeList) xPath.compile(xpathExpression).evaluate(doc, XPathConstants.NODESET);		System.out.println("nodelist length = " + nodeList.getLength());		if (nodeList.getLength() == 1){			xml = nodeToString(nodeList.item(0));		} else if (nodeList.getLength() == 0) {			ExecutionLog.Log("Node not found matching xpath expression \"" + xpathExpression + "\"");		} else {			ExecutionLog.Log("A total of " + nodeList.getLength() + " nodes were found.  ");		}		return xml;	}		 private String nodeToString(Node node) throws Exception{		 String nodeString = null;		 		 StringWriter sw = new StringWriter();		 try {			 Transformer t = TransformerFactory.newInstance().newTransformer();		     t.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");		     t.transform(new DOMSource(node), new StreamResult(sw));		     nodeString = sw.toString();		   } catch (TransformerException te) {		     System.out.println("nodeToString Transformer Exception");		   }	   return nodeString;	 }	}